#compdef eii
#zsh completion for eii
#
#eii - sqlite as bash arguments
#
_eii_all_dbs() {_all_dbs=($(eii showdb -co)) }
_eii_all_tables() {_all_tables=($(eii list -co)) }
_eii_all_columns() {_all_columns=($(eii showcol "$@" -co)) }
_tables=()
_columns=()
_filters=()
_setcols=()

# helpers
_s2n() { tr ' ' '\n'|sort }
_n2s() { tr '\n' ' ' }

_eii_db_query()
{
  _eii_all_dbs
  _describe "database" _all_dbs
}

_eii_table_query()
{
  _eii_all_tables
  res=($(comm -23 <(echo ${_all_tables}|_s2n) <(echo ${_tables}|_s2n)|_n2s))
  _describe "table" res
}

_eii_column_query()
{
  local -a cols
  for tbl in $_tables; do
    _eii_all_columns $tbl
    cols+=($_all_columns[@])
  done
  res=($(comm -23 <(echo ${cols}|_s2n) <(echo "$1"|_s2n)|_n2s))
  _describe "column" res
}

_eii_select_options()
{
  _arguments -s : \
    '--column[column]' \
    '--filter[filter value]' \
    '--value[value]' \
    '*: :->'
}

_eii_update_options()
{
  _arguments -s : \
    '--filter[filter on column(s)]' \
    '--value[value(s) for filter]' \
    '--set[column]' \
    '--to[new value]' \
    '*: :->'
}

_eii_table_options()
{
  _alternative \
    'tables:table:_eii_table_query' \
}

_eii_db_options()
{
  _arguments -s : \
    '::database:_eii_db_query'
}

_eii_command()
{
  #select
  # --filter cols
  # --column to show
  # --value for filter
  #delete
  # --filter cols
  # --value for filter
  #insert
  # --column to be inserted
  # --value to column
  #update
  # --filter
  # --value
  # --set column
  # --to value for set
  local -a _eii_cmds
  _eii_cmds=(
  "insert:Insert data"
  "delete:Delete data"
  "update:Update data"
  "select:Select data"
  "showcol:List columns of table"
  "showdb:List available databases"
  "switch-to:switch to a database"
  "list:List all tables in database"
  )
  _describe -t commands 'eii command' _eii_cmds
}

_eii_action()
{
  _tables=($(echo "$@" | cut -d "-" -f1))
  _columns=($(echo "$@" | sed -nr 's/^.*--column (.*) *(--.+|$)/\1/p'))
  _filters=($(echo "$@" | sed -nr 's/^.*--filter (.*) *(--.+|$)/\1/p'))
  _setcols=($(echo "$@" | sed -nr 's/^.*--set (.*) *(--.+|$)/\1/p'))

  #todo: account for cursor position in string
  # $CURSOR where comp was requested

  # set state to last query opt
  local m
  while (($#)); do
    case "$1" in
      -c|--column)
        m="column"
        ;;
      -f|--filter)
        m="filter"
        ;;
      -v|--value)
        m="value"
        ;;
      --set)
        m="setcol"
        ;;
      --to)
        m="toval"
        ;;
    esac
    shift
  done

  case ${cmd} in
    select)
      _eii_select_action
      ;;
    update)
      _eii_update_action
      ;;
  esac
}

_eii_select_action() {
  _eii_select_options
  case ${m} in
    column)
      _eii_column_query ${_columns}
      ;;
    filter)
      _eii_column_query ${_filters}
      ;;
    value)
      #NOP
      ;;
    *)
      _eii_table_options
  esac
}

_eii_update_action() {
  _eii_update_options
  case ${m} in
    filter)
      _eii_column_query ${_filters}
      ;;
    setcol)
      _eii_column_query ${_setcols}
      ;;
    toval)
      #NOP
      ;;
    value)
      #NOP
      ;;
    *)
      _eii_table_options
  esac
}

_eii_comp() {
  local cmd
  if (( CURRENT > 2)); then
    cmd=${words[2]}
    (( CURRENT-- ))
    shift words
    case "${cmd}" in
      select|update|insert|delete)
        _eii_action ${words[@]:1}
        ;;
        #todo:
        # newdb) name file
      switch-to)
        _eii_db_options
        ;;
      showcol)
        #todo: fix, this doesnt remove tables when selected
        _eii_table_options
        ;;
    esac
  else
    _eii_command
  fi
}

_eii_comp
